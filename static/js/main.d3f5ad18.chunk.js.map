{"version":3,"sources":["components/ranking/index.js","components/game/index.js","components/games/index.js","App.js","reportWebVitals.js","index.js"],"names":["Ranking","data","useState","mobile","isOpen","setIsOpen","ranks","setRanks","useEffect","players","forEach","element","Players","player","Name","name","wins","Win","playersArray","Object","values","sort","a","b","id","className","onClick","map","i","round","size","Game","plays","play","Date","toDateString","Score","ID","Games","games","setGames","filter","setFilterFn","Item","push","gamesArray","placeholder","onChange","e","target","value","toLowerCase","includes","game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3f5ad18.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport mobile from 'is-mobile';\nimport Avatar from 'react-avatar';\n\nimport './style.css';\n\nconst Ranking = ({data}) => {\n    const [isOpen, setIsOpen] = useState(!mobile());\n    const [ranks, setRanks] = useState([]);\n\n    useEffect(() => {\n        const players = {};\n        data.forEach(element => {\n            element.Players.forEach(player => {\n                if (!players[player.Name]) { \n                    players[player.Name] = {\n                        name: player.Name,\n                        wins: player.Win ? 1 : 0\n                    }\n                } else {\n                    players[player.Name] = {\n                        name: player.Name,\n                        wins: player.Win ? players[player.Name].wins + 1 : players[player.Name].wins\n                    }\n                }\n            });\n        });\n        const playersArray = Object.values(players);\n        \n        setRanks(playersArray.sort((a, b) => b.wins - a.wins));\n    }, [data]);\n\n    const toggleSideBar = () => {\n        setIsOpen(!isOpen)\n    }\n\n    return (\n        <div id={`ranking`}  className={isOpen ? 'animated slideInRight' : 'animated slideOutRight'}>\n            <div>\n                <div className='handle-bar' onClick={toggleSideBar}>\n                    Ranking\n                </div>\n            </div>\n            <div id='ranks'>\n                {ranks.map((player, i) => (\n                    <div key={player.name} className='rank-item'>\n                        <div className='avatar'>  \n                            <Avatar name={player.name} round size=\"40\" />\n                            <span className='rank-score'>#{i + 1}</span>\n                        </div>\n                        <div className='player-name'>  \n                            {player.name}\n                            <div className='player-wins'>\n                                wins: {player.wins}\n                            </div>\n                        </div>\n                        \n                    </div>\n                ))}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Ranking;","import { useState } from 'react';\nimport Avatar from 'react-avatar';\nimport \"./style.css\"\n\nconst Game = ({data}) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleGame = () => {\n        setIsOpen(!isOpen);\n    }\n    return (\n        <div className={`game ${isOpen? 'is-open' : 'is-close'}`}>\n            <h3 onClick={toggleGame}>{data.Name}</h3>\n            {isOpen && \n            <div className='plays'>\n            {data.plays.map((play)=> (\n                <div key={play.ID} className={`play animated ${isOpen ? 'flipInX' : 'flipOutX'}`}>\n                    <h2>{new Date(play.Date).toDateString()}</h2>\n                    <div className='players'>\n                        {play.Players.map((player, i) => (\n                            <div key={player.name} className={`player ${player.Win ? 'win': ''}`}>\n                                <div className='avatar'>  \n                                    <Avatar name={player.Name} round size=\"40\" />\n                                </div>\n                                <div className='player-name'>  \n                                    {player.Name}\n                                    {player.Score &&\n                                    <div>\n                                        Score: {player.Score}\n                                    </div>\n                                    }\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ))}\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default Game;","import { useEffect, useState } from 'react';\nimport Game from './../game'\nimport './style.css';\n\nconst Games = ({data}) => {\n    const [games, setGames] = useState([]);\n    const [filter, setFilterFn] = useState('');\n\n    useEffect(() => {\n        const games = {};\n        data.forEach(element => {\n            const id = '_' + element.Item.ID\n            if (!games[id]) {\n                games[id] = {\n                    ...element.Item,\n                    plays: [element]\n                }\n            } else {\n                games[id].plays.push(element);\n            }\n        });\n        const gamesArray = Object.values(games);\n        setGames(gamesArray)\n    }, [data]);\n\n    const setFilter = (e) => {\n        setFilterFn(e.target.value);\n    }\n    return (\n        <div id={`games`}>\n            <div className={'search-wrapper'}>\n                <input placeholder='Search Board Name' className={'search-input'} onChange={setFilter} />\n            </div>\n            {games.filter(i => i.Name.toLowerCase().includes(filter.toLowerCase())).map((game) => (\n                <Game key={game.ID} data={game}/>\n            ))}\n        </div>\n    )\n}\n\nexport default Games;","import './App.css';\nimport Ranking from './components/ranking';\nimport Games from './components/games';\nimport data from './play.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <Ranking data={data}/>\n      <Games data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}